openapi: 3.0.0
info:
  title: PWA Semester Project
  description: REST API project management app
  version: 0.1.9
servers:
  - url: https://pwa-semester-project.onrender.com/api
    description: Render.com dev server
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: auth-token

  schemas:
    Task:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        author:
          type: string
        collaborators:
          type: string
        project:
          type: string
        state:
          type: string

    Project:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        author:
          type: string
        collaborators:
          type: string
        task:
          type: string
        status:
          type: string

    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string

paths:
  /user/register:
    post:
      summary: Register new user
      description: Register new user in database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        200:
          description: User registered successfully.
        400:
          description: Bad request, name or email already exists.

  /user/login:
    post:
      summary: Log in user
      description: Log in as existing user in the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        200:
          description: Log in successful.
        400:
          description: Bad request, wrong email or password.

  /project/{id}:
    get:
      summary: Get project based on user id
      description: Get array of projects with user assigned as collaborator/author.
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string

      responses:
        200:
          description: Retrieves array of projects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"

    put:
      summary: Update existing project
      description: Update a project in the database based on project id.
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"

      responses:
        200:
          description: Project updated successfully.
        400:
          description: Bad request, id is wrong or doesn't exist.

    delete:
      summary: Delete existing project
      description: Delete a project in the database based on its id.
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string

      responses:
        200:
          description: Project deleted successfully.
        400:
          description: Bad request, id is wrong or doesn't exist.

  /project:
    post:
      summary: Create new project
      description: Create new project in the database.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"

      responses:
        200:
          description: Project uploaded successfully.
        400:
          description: Bad request, check the body format.

  /task/{id}:
    get:
      summary: Get task based on project id
      description: Get array of tasks assigned to project id.
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string

      responses:
        200:
          description: Retrieves array of projects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"

    put:
      summary: Update existing task
      description: Update a task in the database based on task id.
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"

      responses:
        200:
          description: Task updated successfully.
        400:
          description: Bad request, id is wrong or doesn't exist.

    delete:
      summary: Delete existing task
      description: Delete a task in the database based on its id.
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string

      responses:
        200:
          description: Task deleted successfully.
        400:
          description: Bad request, id is wrong or doesn't exist.

  /task:
    post:
      summary: Create new task
      description: Create new task in the database.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"

      responses:
        200:
          description: Task uploaded successfully.
        400:
          description: Bad request, check the body format.

  /users:
    get:
      summary: Get all users
      description: Get all users from database as JSON objects.
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Retrieves all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /users/{id}:
    get:
      summary: Get user based on user id
      description: Get user object based on assigned id.
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string

      responses:
        200:
          description: Retrieves user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
